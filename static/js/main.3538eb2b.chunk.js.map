{"version":3,"sources":["trivia.png","redux/actions/index.js","redux/reducers/player.js","redux/reducers/index.js","redux/reducers/token.js","redux/store/index.js","services/searchTokenApi.js","services/fetchGravatarPicture.js","components/Header.jsx","pages/Login.jsx","services/fetchGame.js","components/Player.jsx","components/Timer.jsx","pages/Game.jsx","pages/Settings.jsx","pages/Feedback.jsx","pages/Ranking.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","addToken","token","type","INITIAL_STATE","name","assertions","score","gravatarEmail","picture","rootReducer","combineReducers","player","state","action","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","searchTokenAPI","a","fetch","APIResponse","json","response","fetchGravatarPicture","hash","md5","toString","Header","className","src","logo","alt","React","Component","Login","handleChange","target","value","setState","validate","match","buttonDisable","handleClick","props","history","updateToken","updatePlayer","updatePicture","push","handleClickButtonSettings","handleClickRanking","this","data-testid","placeholder","onChange","style","backgroundColor","onClick","disabled","connect","dispatch","addLogin","addGravatarPicture","fetchGame","url","resolve","data","console","log","Player","Timer","timer","time","isOverTime","timerOn","getTime","prev","clearInterval","interval","startTimer","setInterval","Game","randomNumber","Math","random","currentTime","calculateAndUpdateScore","gameQuestions","questionNumber","updateScoreDispatch","difficulty","handleEndOfAnswering","length","overTime","questionAnswered","redirectToFeedback","nextButton","checkAnswer","userAnswer","correctAnswer","correct_answer","defineNumberCorrectAnswer","clickNextButton","selectClass","answer","arrayOfAnswers","getGame","bind","results","responseCode","response_code","forEach","element","index","answers","incorrect_answers","sort","getToken","saveNewToken","to","decode","category","question","map","key","indexOf","updateScore","updateCorrectAnswers","Settings","Feedback","saveOnStorage","ranking","JSON","parse","localStorage","getItem","tempObj","newRanking","setItem","stringify","handlePlayAgainBtn","message","htmlFor","id","Ranking","b","game","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3538eb2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","// import fetchGravatarPicture from '../services/fetchGravatarPicture';\n\nexport const SAVE_TOKEN = 'SAVE_TOKEN';\nexport const ADD_GRAVATAR_PICTURE = 'ADD_GRAVATAR_PICTURE';\nexport const ADD_LOGIN = 'ADD_LOGIN';\nexport const ADD_TOKEN = 'ADD_TOKEN';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const UPDATE_CORRECT_ANSWERS = 'UPDATE_CORRECT_ANSWERS';\n\nexport const saveToken = (payload) => ({\n  type: SAVE_TOKEN, payload,\n});\n\nexport const addLogin = (payload) => ({\n  type: ADD_LOGIN, payload,\n});\n\nexport const addToken = (token) => ({\n  type: ADD_TOKEN, token,\n});\n\nexport const addGravatarPicture = (picture) => ({\n  type: ADD_GRAVATAR_PICTURE, picture,\n});\n\nexport const updateScore = (payload) => ({\n  type: UPDATE_SCORE, payload,\n});\n\nexport const updateCorrectAnswers = (payload) => ({\n  type: UPDATE_CORRECT_ANSWERS, payload,\n});\n\n// export function fetchPicture() {\n//   return async (dispatch) => {\n//     const response = await fetchGravatarPicture();\n//     if (response.status === 'ok') {\n//       const currencies = Object.keys(response.data).filter(\n//         (curr) => curr !== 'USDT',\n//       );\n//       dispatch(saveCurrencies(currencies));\n//     }\n//   };\n// }\n","import {\n  SAVE_TOKEN,\n  ADD_LOGIN,\n  ADD_GRAVATAR_PICTURE,\n  UPDATE_SCORE,\n  UPDATE_CORRECT_ANSWERS,\n} from '../actions/index';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  picture: '',\n};\n\nexport default function player(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_TOKEN:\n    return {\n      ...state,\n      token: action.payload,\n    };\n  case ADD_LOGIN:\n    return {\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.gravatarEmail,\n      score: 0,\n      assertions: 0,\n    };\n  case ADD_GRAVATAR_PICTURE:\n    return {\n      ...state,\n      picture: action.picture,\n    };\n  case UPDATE_SCORE:\n    return {\n      ...state,\n      score: action.payload + state.score,\n    };\n  case UPDATE_CORRECT_ANSWERS:\n    return {\n      ...state,\n      assertions: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './token';\n\nconst rootReducer = combineReducers({ player, token });\n\nexport default rootReducer;\n","const INITIAL_STATE = '';\n\nexport default function token(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'ADD_TOKEN':\n    return action.token;\n  default:\n    return state;\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","const searchTokenAPI = async () => {\n  const getTokenAPI = 'https://opentdb.com/api_token.php?command=request';\n  const APIResponse = await fetch(getTokenAPI);\n  const { token } = await APIResponse.json();\n  const response = token;\n  return response;\n};\n\nexport default searchTokenAPI;\n","import md5 from 'crypto-js/md5';\n\nconst fetchGravatarPicture = (gravatarEmail) => {\n  const hash = md5(gravatarEmail).toString();\n  const url = `https://www.gravatar.com/avatar/${hash}`;\n  return url;\n};\n\nexport default fetchGravatarPicture;\n","import React from 'react';\nimport logo from '../trivia.png';\nimport '../styles/Header.css';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"App-header\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addToken, addLogin, addGravatarPicture } from '../redux/actions';\nimport searchTokenAPI from '../services/searchTokenApi';\nimport fetchGravatarPicture from '../services/fetchGravatarPicture';\nimport Header from '../components/Header';\n// import store from '../store/index';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      gravatarEmail: '',\n      buttonDisable: true,\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value }, () => this.validate());\n  };\n\n  validate = () => {\n    const { name, gravatarEmail } = this.state;\n    // regex retirado de https://regexr.com/3e48o\n    const re = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n    if (name !== '' && gravatarEmail.match(re)) {\n      this.setState({\n        buttonDisable: false,\n      });\n    } else {\n      this.setState({\n        buttonDisable: true,\n      });\n    }\n  };\n\n  handleClick = async () => {\n    const token = await searchTokenAPI();\n    // console.log(await searchTokenAPI());\n    const { history, updateToken, updatePlayer, updatePicture } = this.props;\n    const { gravatarEmail, name } = this.state;\n    const payload = { gravatarEmail, name };\n\n    const picture = fetchGravatarPicture(gravatarEmail);\n\n    updatePicture(picture);\n    updateToken(token);\n    updatePlayer(payload);\n    history.push('/game');\n  };\n\n  handleClickButtonSettings = () => {\n    const { history } = this.props;\n    history.push('/settings');\n  };\n\n  handleClickRanking = () => {\n    const { history } = this.props;\n    history.push('/ranking');\n  };\n\n  render() {\n    const { name, gravatarEmail, buttonDisable } = this.state;\n    // console.log(this.props);\n    return (\n      <>\n        <Header />\n        <main className=\"App-main\">\n          <form className=\"d-grid gap-3\">\n            <input\n              className=\" form-control\"\n              data-testid=\"input-player-name\"\n              name=\"name\"\n              placeholder=\"Nome de Usuário\"\n              onChange={ this.handleChange }\n              value={ name }\n            />\n\n            <input\n              className=\"form-control\"\n              data-testid=\"input-gravatar-email\"\n              name=\"gravatarEmail\"\n              placeholder=\"E-mail\"\n              onChange={ this.handleChange }\n              value={ gravatarEmail }\n            />\n\n            <button\n              style={ { backgroundColor: '#5a189a' } }\n              className=\"btn btn-primary btn-lg  mx-1\"\n              data-testid=\"btn-play\"\n              type=\"button\"\n              onClick={ this.handleClick }\n              disabled={ buttonDisable }\n            >\n              Play\n            </button>\n          </form>\n        </main>\n        <footer>\n          <button\n            style={ { backgroundColor: '#0077b6' } }\n            className=\"btn btn-primary btn-lg  mx-1\"\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            onClick={ this.handleClickButtonSettings }\n          >\n            Configurações\n          </button>\n          <button\n            style={ { backgroundColor: '#0077b6' } }\n            className=\"btn btn-primary btn-lg  mx-1\"\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            onClick={ this.handleClickRanking }\n          >\n            Ranking\n          </button>\n        </footer>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateToken: (token) => dispatch(addToken(token)),\n  updatePlayer: (payload) => dispatch(addLogin(payload)),\n  updatePicture: (picture) => dispatch(addGravatarPicture(picture)),\n});\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","const fetchGame = async (token) => {\n  const quantity = 5;\n  // const token = 'db2d9f52f48eca2797a009b11c9c18747b674db10f470a05664dcd52af4c5b0f';\n  const url = `https://opentdb.com/api.php?amount=${quantity}&token=${token}`;\n  try {\n    const resolve = await fetch(url);\n    const data = await resolve.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default fetchGame;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Player extends React.Component {\n  render() {\n    const { name, score, picture } = this.props;\n    return (\n      <div>\n        <img src={ picture } data-testid=\"header-profile-picture\" alt={ name } />\n        <span data-testid=\"header-player-name\">{name}</span>\n        <span data-testid=\"header-score\">{score}</span>\n      </div>\n    );\n  }\n}\n\nPlayer.propTypes = {\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  picture: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  picture: state.player.picture,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps, null)(Player);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      time: 30,\n    };\n  }\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  timer = () => {\n    const { time } = this.state;\n    const { isOverTime, timerOn, getTime } = this.props;\n    if (time > 0 && timerOn) {\n      this.setState((prev) => ({ time: prev.time - 1 }));\n    }\n    if (time <= 0) {\n      isOverTime(true);\n      clearInterval(this.interval);\n      getTime(time);\n    }\n    if (!timerOn) {\n      clearInterval(this.interval);\n      getTime(time);\n    }\n  }\n\n  startTimer = () => {\n    const second = 1000;\n    this.interval = setInterval(this.timer, second);\n  }\n\n  render() {\n    const { time } = this.state;\n    return (\n      <h2 className=\"mt-3\">{time}</h2>\n    );\n  }\n}\n\nTimer.propTypes = {\n  isOverTime: PropTypes.func,\n  timerOn: PropTypes.bool,\n}.isRequired;\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport { decode } from 'he';\nimport fetchGame from '../services/fetchGame';\nimport searchTokenAPI from '../services/searchTokenApi';\nimport { addToken, updateScore, updateCorrectAnswers } from '../redux/actions';\nimport Player from '../components/Player';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\nimport '../styles/Game.css';\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gameQuestions: [], // informações relacionadas a cada uma das perguntas\n      questionNumber: 0, // número da questão sendo apresentada\n      overTime: false,\n      timerOn: true,\n      questionAnswered: false,\n      currentTime: 30,\n      nextButton: false, // define se o botão next ficará visível para na tela\n      redirectToFeedback: false,\n      arrayOfAnswers: [],\n    };\n    this.getGame = this.getGame.bind(this);\n  }\n\n  componentDidMount() {\n    const { token } = this.props;\n    this.getGame(token);\n  }\n\n  async getGame(token) {\n    const { results, response_code: responseCode } = await fetchGame(token);\n    console.log(results);\n    const validTokenCode = 0;\n    if (responseCode === validTokenCode) {\n      const arrayOfAnswers = [];\n      console.log(this.randomNumber);\n      results.forEach((element, index) => {\n        const answers = [element.correct_answer, ...element.incorrect_answers];\n        arrayOfAnswers[index] = answers.sort(this.randomNumber);\n      });\n      console.log(arrayOfAnswers);\n      this.setState({ gameQuestions: results, arrayOfAnswers });\n    } else { this.getToken(); }\n  }\n\n  async getToken() {\n    const { saveNewToken } = this.props;\n    const token = await searchTokenAPI();\n    saveNewToken(token);\n    this.getGame(token);\n  }\n\n  randomNumber = () => {\n    const range = 0.5;\n    return Math.random() - range;\n  }\n\n  getTime = (time) => {\n    this.setState({ currentTime: time });\n  }\n\n  calculateAndUpdateScore = () => {\n    const { gameQuestions, questionNumber, currentTime } = this.state;\n    const { updateScoreDispatch } = this.props;\n    const scoreDefault = 10;\n    const easy = 1;\n    const medium = 2;\n    const hard = 3;\n    let score = 0;\n    if (gameQuestions[questionNumber].difficulty === 'easy' && currentTime > 0) {\n      score = scoreDefault + (currentTime * easy);\n    } else if (gameQuestions[questionNumber].difficulty === 'medium' && currentTime > 0) {\n      score = scoreDefault + (currentTime * medium);\n    } else if (gameQuestions[questionNumber].difficulty === 'hard' && currentTime > 0) {\n      score = scoreDefault + (currentTime * hard);\n    }\n    updateScoreDispatch(score);\n  }\n\n  handleEndOfAnswering = () => {\n    const { questionNumber, gameQuestions } = this.state;\n    if (questionNumber === (gameQuestions.length - 1)) {\n      this.setState({\n        overTime: true,\n        timerOn: false,\n        questionAnswered: true,\n        redirectToFeedback: true,\n      });\n    } else {\n      this.setState({\n        overTime: true,\n        timerOn: false,\n        questionAnswered: true,\n        nextButton: true,\n      });\n    }\n  }\n\n  checkAnswer = (userAnswer) => {\n    const { gameQuestions, questionNumber } = this.state;\n    const { correct_answer: correctAnswer } = gameQuestions[questionNumber];\n    const { assertions, defineNumberCorrectAnswer } = this.props;\n    if (userAnswer === correctAnswer) {\n      defineNumberCorrectAnswer(assertions + 1);\n      this.calculateAndUpdateScore();\n    }\n    this.handleEndOfAnswering();\n  }\n\n  clickNextButton = () => {\n    const { questionNumber } = this.state;\n    this.setState({\n      questionNumber: questionNumber + 1,\n      nextButton: false,\n      timerOn: true,\n      questionAnswered: false,\n      overTime: false,\n    });\n  }\n\n  selectClass = (answer, correctAnswer) => {\n    const { questionAnswered } = this.state;\n    if (questionAnswered) {\n      const className = answer === correctAnswer\n        ? 'mx-1 btn btn-success correct-answer'\n        : 'mx-1 btn btn-danger wrong-answer';\n      return className;\n    }\n    return 'mx-1 btn btn-light';\n  }\n\n  isOverTime = (overTime) => {\n    if (overTime) {\n      this.handleEndOfAnswering();\n    }\n  }\n\n  render() {\n    const {\n      gameQuestions,\n      questionNumber,\n      overTime,\n      timerOn,\n      nextButton,\n      questionAnswered,\n      redirectToFeedback,\n      arrayOfAnswers } = this.state;\n    return (\n      <>\n        {redirectToFeedback && <Redirect to=\"/feedback\" />}\n        <Header />\n        <Player />\n        <main>\n          {gameQuestions.length > 0 && (\n            <div>\n              <h2 data-testid=\"question-category\">\n                {decode(gameQuestions[questionNumber].category)}\n              </h2>\n              <h3 data-testid=\"question-text\">\n                {decode(gameQuestions[questionNumber].question)}\n              </h3>\n              <div data-testid=\"answer-options\">\n                {arrayOfAnswers[questionNumber].map((answer, index) => (\n                  <button\n                    key={ `answer${index}` }\n                    type=\"button\"\n                    onClick={ () => this.checkAnswer(answer) }\n                    data-testid={\n                      answer === gameQuestions[questionNumber].correct_answer\n                        ? 'correct-answer'\n                        : `wrong-answer-${gameQuestions[\n                          questionNumber\n                        ].incorrect_answers.indexOf(answer)}`\n                    }\n                    disabled={ overTime || questionAnswered }\n                    className={ this.selectClass(\n                      answer,\n                      gameQuestions[questionNumber].correct_answer,\n                    ) }\n                  >\n                    {decode(answer)}\n                  </button>\n                ))}\n                {!nextButton && (\n                  <Timer\n                    isOverTime={ this.isOverTime }\n                    timerOn={ timerOn }\n                    getTime={ this.getTime }\n                  />\n                )}\n              </div>\n              {nextButton && (\n                <button\n                  className=\"my-3 btn btn-secondary\"\n                  type=\"button\"\n                  data-testid=\"btn-next\"\n                  onClick={ this.clickNextButton }\n                >\n                  Next\n                </button>\n              )}\n            </div>\n          )}\n        </main>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  score: state.player.score,\n  assertions: state.player.assertions,\n\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveNewToken: (token) => dispatch(addToken(token)),\n  updateScoreDispatch: (payload) => dispatch(updateScore(payload)),\n  defineNumberCorrectAnswer: (payload) => dispatch(updateCorrectAnswers(payload)),\n});\n\nGame.propTypes = {\n  token: PropTypes.string.isRequired,\n  saveNewToken: PropTypes.func.isRequired,\n  updateScoreDispatch: PropTypes.func.isRequired,\n  assertions: PropTypes.number.isRequired,\n  defineNumberCorrectAnswer: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <h1 data-testid=\"settings-title\">Configurações</h1>\n      </>\n    );\n  }\n}\n\nexport default connect()(Settings);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport Player from '../components/Player';\nimport Header from '../components/Header';\n// import { updateCorrectAnswers } from '../actions';\n\nclass Feedback extends Component {\n  componentDidMount() {\n    this.saveOnStorage();\n  }\n\n  saveOnStorage = () => {\n    const { name, score, picture } = this.props;\n    const ranking = JSON.parse(localStorage.getItem('ranking')) || [];\n    const tempObj = {\n      name,\n      score,\n      picture,\n    };\n    const newRanking = [...ranking, tempObj];\n    localStorage.setItem('ranking', JSON.stringify(newRanking));\n  }\n\n  handlePlayAgainBtn = () => {\n    const { history } = this.props;\n    // setAnsweredToZero(0);\n    history.push('/');\n  };\n\n  handleClick() {\n    const { history } = this.props;\n    history.push('/ranking');\n  }\n\n  render() {\n    const { assertions, score } = this.props;\n    const minimalCorrectAnswers = 3;\n    const message = assertions < minimalCorrectAnswers\n      ? 'Could be better...'\n      : 'Well Done!';\n    return (\n      <>\n        <Header />\n        <Player />\n        <main>\n          <h1 className=\"my-3\" data-testid=\"feedback-text\">\n            {message}\n          </h1>\n          <label className=\"mx-2\" htmlFor=\"total-score\">\n            Sua pontuação:\n            <h2\n              className=\"mx-2\"\n              id=\"total-score\"\n              data-testid=\"feedback-total-score\"\n            >\n              {score}\n            </h2>\n          </label>\n          <label className=\"mx-2\" htmlFor=\"total-questions\">\n            Você acertou:\n            <h2\n              className=\"mx-2\"\n              id=\"total-questions\"\n              data-testid=\"feedback-total-question\"\n            >\n              {assertions}\n            </h2>\n          </label>\n          <button\n            style={ { backgroundColor: '#5a189a' } }\n            className=\"mx-1 btn btn-primary\"\n            type=\"button\"\n            data-testid=\"btn-play-again\"\n            onClick={ () => this.handlePlayAgainBtn() }\n          >\n            Play Again\n          </button>\n          <button\n            style={ { backgroundColor: '#0077b6' } }\n            className=\"mx-1 btn btn-primary\"\n            data-testid=\"btn-ranking\"\n            type=\"button\"\n            onClick={ () => this.handleClick() }\n          >\n            Ranking\n          </button>\n          {/* <button\n            className=\"mx-1 btn btn-secondary\"\n            type=\"button\"\n            data-testid=\"btn-next\"\n            // onClick={ setAnsweredToZero(0) }\n          >\n            Next\n          </button> */}\n        </main>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  name: state.player.name,\n  score: state.player.score,\n  picture: state.player.picture,\n});\n\n// const mapDispatchToProps = (dispatch) => ({\n//   setAnsweredToZero: (payload) => dispatch(updateCorrectAnswers(payload)),\n// });\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  // setAnsweredToZero: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Feedback);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport '../App.css';\n\nclass Ranking extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      ranking: JSON.parse(localStorage.getItem('ranking')),\n    };\n  }\n\n  // comp\n\n  // loadGamesInfo = () => {\n  //   this.setState({\n  //     ranking: JSON.parse(localStorage.getItem('ranking')),\n  //   });\n  // }\n\n  render() {\n    const { history } = this.props;\n    const { ranking } = this.state;\n    console.log(ranking);\n    return (\n      <>\n        <Header />\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        <section className=\"ranking-section\">\n          {ranking\n            .sort((a, b) => b.score - a.score)\n            .map((game, index) => (\n              <div className=\"mx-2\" key={ `ranking${index}` }>\n                <img src={ game.picture } alt={ `Foto do ${game.name}` } />\n                <span data-testid={ `player-name-${index}` }>{game.name}</span>\n                <span data-testid={ `player-score-${index}` }>{game.score}</span>\n              </div>\n            ))}\n        </section>\n        <button\n          className=\"btn btn-primary ranking-back-to-home\"\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ () => history.push('/') }\n        >\n          Voltar à Login\n        </button>\n      </>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }),\n}.isRequired;\n\nexport default Ranking;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/game\" component={ Game } />\n        <Route exact path=\"/settings\" component={ Settings } />\n        <Route exact path=\"/feedback\" component={ Feedback } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}